<%
	def htmlize(str)
      str.to_s.gsub(/&/, "&amp;").gsub(/"/, "&quot;").gsub("<", "&lt;").gsub(">", "&gt;").gsub("\t", "&nbsp;&nbsp;&nbsp;&nbsp;").gsub(" ", "&nbsp;")
    end
    log = "Not Available"
    begin
    	log = htmlize(result[:log][:debugging_info][:debug_log])
    rescue

   	end

	warnings = []
	general_warnings = []
	if result[:check_deploy_status_response][:result][:run_test_result][:code_coverage_warnings]
		if result[:check_deploy_status_response][:result][:run_test_result][:code_coverage_warnings].kind_of? Array
			warnings = result[:check_deploy_status_response][:result][:run_test_result][:code_coverage_warnings]
		else
			warnings.push(result[:check_deploy_status_response][:result][:run_test_result][:code_coverage_warnings])	
		end
	end
	warnings.each do |w|
		if w[:name].nil?
			general_warnings.push(w)
		end
	end
	
	
	failures = []
	if result[:check_deploy_status_response][:result][:run_test_result][:failures]
		if result[:check_deploy_status_response][:result][:run_test_result][:failures].kind_of? Array
			failures = result[:check_deploy_status_response][:result][:run_test_result][:failures]
		else
			failures.push(result[:check_deploy_status_response][:result][:run_test_result][:failures])	
		end
	end
	
	successes = []
	if result[:check_deploy_status_response][:result][:run_test_result][:successes]
		if result[:check_deploy_status_response][:result][:run_test_result][:successes].kind_of? Array
			successes = result[:check_deploy_status_response][:result][:run_test_result][:successes]
		else
			successes.push(result[:check_deploy_status_response][:result][:run_test_result][:successes])	
		end
	end
	
	code_coverage_result = []
	if result[:check_deploy_status_response][:result][:run_test_result][:code_coverage].kind_of? Array
		code_coverage_result = result[:check_deploy_status_response][:result][:run_test_result][:code_coverage]
	else
		code_coverage_result.push(result[:check_deploy_status_response][:result][:run_test_result][:code_coverage])	
	end
	
	class_coverage = []
	trigger_coverage = []
	
    code_coverage_result.each do |r|
		begin
			if r.has_key?(:id)
				if r[:id].start_with?("01q")
					trigger_coverage.push(r)
				else
					class_coverage.push(r)
				end	
			else
				if r[:type] == "Trigger"
					trigger_coverage.push(r)
				else
					class_coverage.push(r)
				end	
			end
		rescue Exception => e
			class_coverage.push(r)
		end	
	end

	if class_coverage.size > 1	
		begin
			class_coverage.sort! { |a,b| 
				a_coverage = 100 * ((a[:num_locations].to_f - a[:num_locations_not_covered].to_f) / a[:num_locations].to_f)
				b_coverage = 100 * ((b[:num_locations].to_f - b[:num_locations_not_covered].to_f) / b[:num_locations].to_f)
				b_coverage <=> a_coverage
			}
	 	rescue
		end
	end
	if trigger_coverage.size > 1	
		begin
			trigger_coverage.sort! { |a,b| 
				a_coverage = 100 * ((a[:num_locations].to_f - a[:num_locations_not_covered].to_f) / a[:num_locations].to_f)
				b_coverage = 100 * ((b[:num_locations].to_f - b[:num_locations_not_covered].to_f) / b[:num_locations].to_f)
				b_coverage <=> a_coverage
			}  
		rescue
		end 
	end   
	
	results_normal = {}
	#{"foo"=>[{:name = "foobar"}{:name = "something else"}], "bar"=>[]}
	
	successes.each do |success|
	 	if ! results_normal.has_key? success[:name] #key isn't there yet, put it in        
      arr = Array.new
			results_normal[success[:name]] = arr.push(success)
    else #key is there, let's add metadata to it
    	arr = results_normal[success[:name]] #get the existing array
      arr.push(success) #add the new piece of metadata
      results_normal[success[:name]] = arr #replace the key
    end
	end
	
	failures.each do |failure|
	 	if ! results_normal.has_key? failure[:name] #key isn't there yet, put it in        
      arr = Array.new
			results_normal[failure[:name]] = arr.push(failure) #file name with no extension
    else #key is there, let's add metadata to it
    	arr = results_normal[failure[:name]] #get the existing array
      arr.push(failure) #add the new piece of metadata
      results_normal[failure[:name]] = arr #replace the key
    end
	end
%> 

<% general_warnings.each do |w| %>
	<div class="alert-message block-message error">
		<p><strong><%= w[:message] %></strong></p>
	</div>
<% end %>

<% results_normal.each do |cls, tests| %>
	
	<%
		failing_tests = tests.count {|test| test[:stack_trace] } || 0
		passing_tests = tests.count {|test| !test[:stack_trace] } || 0
		total_tests = passing_tests + failing_tests
	%>
	
	<div class="alert-message block-message-custom" style="margin-bottom:0px;padding: 5px;-webkit-border-radius: 4px 4px 0px 0px;">
			<p style="float:left;"><strong><%= cls %>.cls</strong></p>
			<p style="float:right;"><strong><%= passing_tests %>/<%= total_tests %> tests passed</strong></p>
		<div style="clear:both;"></div>	
	</div>
	<table class="bordered-table test_result" style="-webkit-border-radius: 0px 0px 4px 4px;">
		<thead>
			<tr>
				<th>Test Method</th>
				<th>Result</th>
				<th>Message</th>
			</tr>
		</thead>
		<tbody>
			<% tests.each_with_index do |test, index| %>
				<tr>
					<td style="width:210px;"><%= test[:method_name] %></td>
					<td style="width:45px;">
						<% if ! test[:stack_trace] %>
							<span class="label success">Passed</span>
						<% else %>
							<span class="label important">Failed</span>
						<% end %>
					</td>
					<td>
						<%= test[:message] ? test[:message] : "" %> 
						<% if test[:stack_trace] %>
							<a onclick="$('#modal_<%= index %>').modal('toggle')" href="#">[Stack Trace]</a>
							<div class="modal" style="display:none;" id="modal_<%= index %>">
								<div class="modal-header">
					            	<a href="#" class="close">Ã—</a>
					            	<h3>Stack Trace</h3>
					          	</div>
								<div class="modal-body">
									<div style="height:400px;overflow-y:auto;">
										<%= test[:stack_trace] %>
									</div>
					          	</div>
								<div class="modal-footer">
									<a href="#" onclick="$('#modal_<%= index %>').modal('hide')" class="btn primary">OK</a>
								</div>
							</div>
						<% end %>
					</td>
				</tr>
			<% end %>
		</tbody>
	</table>
<% end %> 

<div id="warnings_wrapper">
	<!-- PROCESS WARNINGS -->
	<div class="alert-message block-message-custom" style="margin-bottom:0px;padding: 5px;-webkit-border-radius: 4px 4px 0px 0px;">
			<p style="float:left;"><strong>Test Coverage Warnings</strong></p>
		<div style="clear:both;"></div>	
	</div>
	<table class="bordered-table test_result" style="-webkit-border-radius: 0px 0px 4px 4px;">
		<thead>
			<tr>
				<th>Metadata</th>
				<th>Message</th>
			</tr>
		</thead>
		<tbody>
			<% warnings.each do |w| %>
				<% if ! w[:name].nil? %>
					<tr>
						<td><%= w[:name] %></td>					
						<td><%= w[:message] %></td>					
					</tr>   
				<% end %>
			<% end %>
		</tbody>
	</table>  
	<!-- END PROCESS WARNINGS -->
</div>


<div id="class_wrapper">
	<!-- START CLASS PROCESSING -->
	<% class_coverage.each_with_index do |r, i| %>
		<% next if ! r[:num_locations] %>
		<% next if r[:num_locations].to_i == 0 %>
		<% coverage = 100 * ((r[:num_locations].to_f - r[:num_locations_not_covered].to_f) / r[:num_locations].to_f) %>
		<% 
			locations_not_covered_result = []
			if ! r[:locations_not_covered].nil?
				if r[:locations_not_covered].kind_of? Array
					locations_not_covered_result = r[:locations_not_covered]
				else
					locations_not_covered_result.push(r[:locations_not_covered])	
				end
			end
	
			coverage_class = "" 
			case coverage.to_i
			when 0..40
			  coverage_class = "low"
			when 41..74
			  coverage_class = "medium"
			when 75..100
			  coverage_class = ""
			else
			  coverage_class = ""
			end
	
			# passing_tests = successes.count {|test| test[:name] == result[:name]} || 0
			# failing_tests = failures.count {|test| test[:name] == result[:name]} || 0
			# total_tests = passing_tests + failing_tests
			display = coverage.to_i == 0 ? "none" : "block"  
		%>

		<% extension = "cls"  %>
		<% directory = "classes" %>

	<div class="alert-message block-message-custom " style="padding: 0px 5px 5px 5px;">
	  	<div style="margin-bottom:10px;">
			<p style="float:left;"><strong><%= r[:name] %>.<%= extension %></strong></p>
			<p style="float:right;"><strong></strong></p>
		</div>
		<div style="clear:both;"></div>
		<p style="margin-bottom:10px;">
			<div id="progress_bar" class="ui-progress-bar ui-container" style="-webkit-border-radius: 8px;height: 22px;">
	      		<div class="ui-progress <%= coverage_class %>" style="-webkit-border-radius:8px;height:20px;width: <%= coverage %>%; display: <%= display %>; ">
	        		<span style="font-size: 1.1em;line-height: 21px;" class="ui-label <%= coverage_class %>"><%= coverage.to_i %>%</span>
	      		</div>
	    	</div>
		</p>
	  	<div class="alert-actions">
	    	<a href="#" class="btn primary" data-toggle="toggle" 
				onclick="toggleSourceButton(this, <%= i + 1 %>, 'class')" style="padding: 3px 5px;font-size: .9em;">View Coverage</a>
		</div>
	</div>

		<% if File.exist? "#{ENV['MM_CURRENT_PROJECT_DIRECTORY']}/src/#{directory}/#{r[:name]}.#{extension}" %>
			<table class='code' id="class_code_result_<%= i + 1 %>">
				<tbody>
					<% 
						File.open("#{ENV['MM_CURRENT_PROJECT_DIRECTORY']}/src/#{directory}/#{r[:name]}.#{extension}").each_with_index do |line, index| 
							td_class = locations_not_covered_result.detect {|loc| loc[:line].to_i == index + 1 } ? "not_covered" : "covered" 
					%>
					<tr>
				    <td class="line_numbers"><%= index + 1 %></td>
				    <td class="code <%= td_class %>"><%= htmlize(line) %></td>
					</tr>
				<% end%>
				</tbody>
			</table>
		<% end%>
	
	<% end %> 
	<!-- END CLASS PROCESSING --> 
</div>

<div id="trigger_wrapper">
	<!-- START TRIGGER PROCESSING -->
	<% trigger_coverage.each_with_index do |r, i| %>
		<% next if ! r[:num_locations] %>
		<% next if r[:num_locations].to_i == 0 %>
		<% coverage = 100 * ((r[:num_locations].to_f - r[:num_locations_not_covered].to_f) / r[:num_locations].to_f) %>
	<% 
		locations_not_covered_result = []
		if ! r[:locations_not_covered].nil?
			if r[:locations_not_covered].kind_of? Array
				locations_not_covered_result = r[:locations_not_covered]
			else
				locations_not_covered_result.push(r[:locations_not_covered])	
			end
		end
	
		coverage_class = "" 
		case coverage.to_i
		when 0..40
		  coverage_class = "low"
		when 41..74
		  coverage_class = "medium"
		when 75..100
		  coverage_class = ""
		else
		  coverage_class = ""
		end
	
		# passing_tests = successes.count {|test| test[:name] == result[:name]} || 0
		# failing_tests = failures.count {|test| test[:name] == result[:name]} || 0
		# total_tests = passing_tests + failing_tests
		display = coverage.to_i == 0 ? "none" : "block"
	%>

	<% extension = "trigger"  %>
	<% directory = "triggers" %>

	<div class="alert-message block-message-custom " style="padding: 0px 5px 5px 5px;">
	  	<div style="margin-bottom:10px;">
			<p style="float:left;"><strong><%= r[:name] %>.<%= extension %></strong></p>
			<p style="float:right;"><strong></strong></p>
		</div>
		<div style="clear:both;"></div>
		<p style="margin-bottom:10px;">
			<div id="progress_bar" class="ui-progress-bar ui-container" style="-webkit-border-radius: 8px;height: 22px;">
	      		<div class="ui-progress <%= coverage_class %>" style="-webkit-border-radius:8px;height:20px;width: <%= coverage %>%; display: <%= display %>; ">
	        		<span style="font-size: 1.1em;line-height: 21px;" class="ui-label <%= coverage_class %>"><%= coverage.to_i %>%</span>
	      		</div>
	    	</div>
		</p>
	  	<div class="alert-actions">
	    	<a href="#" class="btn primary" data-toggle="toggle" 
				onclick="toggleSourceButton(this, <%= i + 1 %>, 'trigger')" style="padding: 3px 5px;font-size: .9em;">View Coverage</a>
		</div>
	</div>

		<% if File.exist? "#{ENV['MM_CURRENT_PROJECT_DIRECTORY']}/src/#{directory}/#{r[:name]}.#{extension}" %>
			<table class='code' id="trigger_code_result_<%= i + 1 %>">
				<tbody>
					<% 
						File.open("#{ENV['MM_CURRENT_PROJECT_DIRECTORY']}/src/#{directory}/#{r[:name]}.#{extension}").each_with_index do |line, index| 
							td_class = locations_not_covered_result.detect {|loc| loc[:line].to_i == index + 1 } ? "not_covered" : "covered" 
					%>
					<% puts "line: " + line.to_s %>
					<tr>
				    <td class="line_numbers"><%= index + 1 %></td>
				    <td class="code <%= td_class %>"><%= htmlize(line) %></td>
					</tr>
				<% end%>
				</tbody>
			</table>
		<% end%>
	
	<% end %>
	<!-- END TRIGGER PROCESSING -->
</div>

<div id="log_wrapper" style="position:relative;">
	<a href="javascript:void(0)" class="btn primary" onclick="$('#log_selector').selectText();" style="padding: 3px 5px;font-size: .9em;top:0;right:10px;position:absolute;">Select Log Text</a>
	<div style="padding:10px;" id="log_selector">
		<%= log %>
	</div>
</div>


<!-- </div>  -->
